name: Continuous Integration

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  deploy-preview:
    name: GitHub Actions Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Get short commit hash
        id: get_short_sha
        run:
          echo "short_sha=$(git rev-parse --short $GITHUB_SHA)" >>
          $GITHUB_OUTPUT

      - name: Test Local Action
        id: test-action
        uses: ./
        with:
          railway_api_token: ${{ secrets.RAILWAY_API_TOKEN }}
          project_id: ${{ secrets.RAILWAY_PROJECT_ID }}
          environment_name: production
          preview_environment_name:
            'pr-${{ github.event.number }}-${{
            steps.get_short_sha.outputs.short_sha }}'
          api_service_name: web
          branch_name: ${{ github.head_ref }}

      - name: Print Output
        id: output
        if: ${{ steps.test-action.outputs.service_domain != '' }}
        run: echo "${{ steps.test-action.outputs.service_domain }}"

      - name: Post or update deployment comment
        if: ${{ steps.test-action.outputs.service_domain != '' }}
        uses: actions/github-script@v6
        with:
          script: |
            const { data: commits } = await github.rest.pulls.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              per_page: 1
            });
            const latestCommit = commits[commits.length - 1];
            const latestCommitAuthor = latestCommit.commit.author.name;
            const latestCommitTime = new Date(latestCommit.commit.author.date).toLocaleString();

            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const body = `
              ðŸš€ **Deployment success!**

              - \`web\` deployed at [${{ steps.test-action.outputs.service_domain }}](${{ steps.test-action.outputs.service_domain }})

              ---

              *commit: ${latestCommit.sha}*  
              *author: ${latestCommitAuthor}*  
              *time: ${latestCommitTime}*
            `;

            const comment = comments.find(comment => comment.body.includes('ðŸš€ Deployment success!'));

            if (comment) {
              await github.rest.issues.updateComment({
                comment_id: comment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }

  cleanup:
    runs-on: ubuntu-latest
    if:
      github.event.pull_request.merged == true ||
      github.event.pull_request.state == 'closed'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get short commit hash
        id: get_short_sha
        run:
          echo "short_sha=$(git rev-parse --short $GITHUB_SHA)" >>
          $GITHUB_OUTPUT

      - name: Cleanup Railway Environment
        uses: ./
        with:
          railway_api_token: ${{ secrets.RAILWAY_API_TOKEN }}
          project_id: ${{ secrets.RAILWAY_PROJECT_ID }}
          preview_environment_name:
            'pr-${{ github.event.number }}-${{
            steps.get_short_sha.outputs.short_sha }}'
          cleanup: 'true'
